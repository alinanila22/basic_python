# ++++++++++++++++++++++++++++++++++++++++++++++++
# Множества в Python
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ===============================================
# 1. Создайте множество с элементами .
# Добавьте в него число, затем попробуйте добавить уже существующий элемент.
# Выведите итоговое множество.

# s = {1, 2, 3, 4, 5}
# s.add(6)
# s.add(1) #уже существует, добавляться не будет
# print("Итоговое множество:", s)

# Пример:
# Итоговое множество: {1, 2, 3, 4, 5, 6}
# ===============================================
# 2. Создайте множество из списка городов:
# Выведите его на экран.
# Сколько уникальных городов в этом списке?

# cities = ["Рим", "Нью-Йорк", "Мадрид", "Москва", "Рим"]
# cities_set = set(cities)
# print("Города:", cities)
# print("Уникальные города:", len(cities_set))

# Практика:
# Города: ['Рим', 'Нью-Йорк', 'Мадрид', 'Москва', 'Рим']
# Уникальные города: 4

# ===============================================
# 3. Создайте множество с числами от 1 до 10.
# Удалите из него:
# Число 5 (если оно есть).
# Число 15 (используйте метод, который не вызовет ошибку).
# Выведите итоговое множество.

# n = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
# n.discard(5)
# n.discard(15)
# print("Итоговое множество:", n)

# Пример:
# Итоговое множество: {1, 2, 3, 4, 6, 7, 8, 9, 10} # число 5 удалили

# ===============================================
# 4. Преобразуйте строку "abrakadabra" в множество символов.
# Выведите итоговое множество и определите, сколько различных букв в слове.

# word = "abrakadabra"
# letters_unique = set(word)  #Остаются только уникальные: a, b, r, k, d
# print("Множество букв:", word)
# print("Количество различных букв:", len(letters_unique))

# Пример:
# Множество букв: abrakadabra
# Количество различных букв: 5
# ===============================================
# 5. Создайте пустое множество и попробуйте добавить в него следующие элементы:
# Число 10
# Строку "hello"
# Кортеж (1, 2, 3)
# Список [4, 5, 6]
# Какие из элементов нельзя добавить в множество? Почему?

# s = set()
# s.add(10)
# print("После добавления 10:", s)
# s.add("hello")
# print('После добавления "hello":', s)
# s.add((1, 2, 3))
# print("После добавления кортежа:", s)
# # s.add[4, 5, 6] # вызывает ошибку.TypeError: 'builtin_function_or_method' object is not subscriptable
# print("Список нельзя добавить, потому что он изменяемый и не хэшируемый")

# ===============================================
# 6. Создайте 2 множества, в которых совпадают 2 элемента
# Найдите:
# Пересечение A и B.
# Объединение A и B.
# Разность A - B.
# Разность B - A.
# Симметричную разность A ^ B.

# A = {1, 2, 3, 4, 5}
# B = {4, 5, 6, 7, 8}
# print("Пересечение A & B:", A & B)
# print("Объединение A | B:", A | B)
# print("Разность A - B:", A - B)
# print("Разность B - A:", B - A)
# print("Симметричная разность A ^ B:", A ^ B)

# Пример:
# Пересечение A & B: {4, 5}
# Объединение A | B: {1, 2, 3, 4, 5, 6, 7, 8}
# Разность A - B: {1, 2, 3}
# Разность B - A: {8, 6, 7}
# Симметричная разность A ^ B: {1, 2, 3, 6, 7, 8}

# ===============================================
# 7. Создайте два множества из чисел 1 до 10:
# even_numbers — содержит четные числа.
# odd_numbers — содержит нечетные числа.
# Проверьте:
# Какое будет пересечение &?
# Какое будет объединение |?

# even_numbers = {2, 4, 6, 8, 10}
# odd_numbers = {1, 3, 5, 7, 9}
# res =  even_numbers & odd_numbers
# print("Пересечение (&):", res)  # Пустое множество
# res_1 = even_numbers | odd_numbers
# print("Объединение (|):", res_1)  # Все числа 1-10


# Пример:
# Пересечение (&): set()
# Объединение (|): {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

# ===============================================
# 8. Даны множества студентов, записавшихся на курсы:
# python_students = {"Анна", "Иван", "Мария", "Сергей"}
# java_students = {"Иван", "Дмитрий", "Сергей", "Алексей"}
# Определите:
# Кто записан на оба курса?
# Кто записан только на один курс?
# Кто записан хотя бы на один курс?

# python_students = {"Анна", "Иван", "Мария", "Сергей"}
# java_students = {"Иван", "Дмитрий", "Сергей", "Алексей"}
# print("На оба курса:", python_students & java_students)
# print("Только на один курс:", python_students ^ java_students)
# print("Хотя бы на один курс:", python_students | java_students)

# Пример:
# На оба курса: {'Сергей', 'Иван'}
# Только на один курс: {'Дмитрий', 'Анна', 'Алексей', 'Мария'}
# Хотя бы на один курс: {'Дмитрий', 'Сергей', 'Анна', 'Алексей', 'Мария', 'Иван'}


# ===============================================
# 9. Даны множества слов:
# text1 = set("программирование")
# text2 = set("автоматизация")
# Найдите общие буквы в двух словах.
# Найдите буквы, которые есть только в первом слове.
# Найдите уникальные буквы каждого слова.

# text1 = set("программирование")
# text2 = set("автоматизация")
# print("Общие буквы:", text1 & text2)
# print("Только в первом слове:", text1 - text2)
# print("Уникальные буквы каждого слова:", text1 ^ text2)

# Пример:
# Общие буквы: {'м', 'о', 'а', 'в', 'и'}
# Только в первом слове: {'е', 'п', 'р', 'н', 'г'}
# Уникальные буквы каждого слова: {'е', 'я', 'ц', 'п', 'н', 'р', 'г', 'т', 'з'}


# ++++++++++++++++++++++++++++++++++++++++++++++++
# Генераторы множеств и словарей
# ++++++++++++++++++++++++++++++++++++++++++++++++
# 1. Создайте множество из квадратов чисел от 1 до 10, но только для четных чисел.

# squares = {x**2 for x in range(1, 11) if x % 2 == 0}
# print("Квадраты четных чисел:", squares)

# Пример:
# Квадраты четных чисел: {64, 100, 4, 36, 16}
# 2. Дан список:
# words = ["apple", "banana", "cherry", "apple", "banana", "date", "cherry"]
# Создайте множество уникальных слов, преобразовав их в верхний регистр.

# words = ["apple", "banana", "cherry", "apple", "banana", "date", "cherry"]
# words1 = {word.upper() for word in words}
# print("Уникальные слова в верхнем регистре:", words1)

# Пример:
# Уникальные слова в верхнем регистре: {'DATE', 'CHERRY', 'BANANA', 'APPLE'}

# 3. Дан словарь:
# grades = {"Alice": 85, "Bob": 78, "Charlie": 92, "David": 60, "Eve": 88}
# Используя генератор, создайте новый словарь, где:
# Если оценка больше или равна 80, записать "отлично".
# Если меньше 80, записать "удовлетворительно".

# grades = {"Alice": 85, "Bob": 78, "Charlie": 92, "David": 60, "Eve": 88}
# grades1 = {name: ("отлично" if grade >= 80 else "удовлетворительно") for name, grade in grades.items()}
# print("Результат:", grades1)

# Пример:
# Результат: {'Alice': 'отлично', 'Bob': 'удовлетворительно', 'Charlie': 'отлично', 'David': 'удовлетворительно', 'Eve': 'отлично'}

# 4. Дано множество слов:
# text = {"Python", "automation", "programming", "testing"}
# Создайте новый словарь, где ключи – это слова из множества, а значения – длина каждого слова.

# text = {"Python", "automation", "programming", "testing"}
# result = {word: len(word) for word in text}
# print("Длина слов:", result)

# Пример:
# Длина слов: {'Python': 6, 'automation': 10, 'programming': 11, 'testing': 7}

# 5. Создайте вложенный словарь, где ключи – числа от 1 до n (для примера пусть n = 10), а значения – множества квадратов чисел от 1 до ключа.
# Пример для n = 3:
#
# {
# 1: {1},
# 2: {1, 4},
# 3: {1, 4, 9}
# }

n = 10
result = {i: {x**2 for x in range(1, i+1)} for i in range(1, n+1)}
print("Вложенный словарь с множеством квадратов:", result)

# Пример:
# Вложенный словарь с множеством квадратов: {1: {1}, 2: {1, 4}, 3: {1, 4, 9}, 4: {16, 1, 4, 9}, 5: {1, 4, 9, 16, 25}, 6: {1, 4, 36, 9, 16, 25}, 7: {1, 4, 36, 9, 16, 49, 25}, 8: {64, 1, 4, 36, 9, 16, 49, 25}, 9: {64, 1, 4, 36, 9, 16, 49, 81, 25}, 10: {64, 1, 4, 36, 100, 9, 16, 49, 81, 25}}