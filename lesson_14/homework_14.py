# ++++++++++++++++++++++++++++++++++++++++++++++++
# Модули в Python
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ===============================================
# 1. Импортируйте только функции sqrt и pow из модуля math и вычислите:
# Квадратный корень из 64
# 5 в степени 3
# Ожидаемый вывод:
# 8.0
# 125.0

# from math import sqrt, pow
#
# print(f"Квадратный корень из 64: {sqrt(64)}")
# print(f"5 в степени 3: {pow(5, 3)}")

# Ожидаемый вывод:
# Квадратный корень из 64: 8.0
# 5 в степени 3: 125.0

# ===============================================
# 2. Импортируйте модуль random и:
# Выведите случайное число от 1 до 10
# Выберите случайный элемент из списка [Python, Java, C++]
# Ожидаемый вывод:
# Случайное число: 7  # (значение может отличаться)
# Выбранный язык: Python  # (значение может отличаться)

# from random import randint, choice
#
# print(f"Cлучайное число от 1 до 10: {randint(1,10)}")
# print(f"Cлучайный элемент из списка: {choice(['Python', 'Java', 'C++'])}")

# Ожидаемый вывод:
# Cлучайное число от 1 до 10: 2
# Cлучайный элемент из списка: Python

# ===============================================
# 3. Создайте свой модуль my_module.py, в котором будут функции:
# add(a, b): складывает два числа
# multiply(a, b): умножает два числа
# Пример вызова в другом файле:
# import my_module
#
# print(my_module.add(3, 5))  # 8
# print(my_module.multiply(4, 6))  # 24
# Cоздайте my_module.py в той же папке!

# import my_module
# print(my_module.add(3, 5))
# print(my_module.multiply(4, 6))

# Ожидаемый вывод:
# 8
# 24

# ===============================================
# 4. Создайте два Python-файла:
#
# utils.py – в нем создайте функцию greet(name), которая выводит приветствие.
# main.py – в нем импортируйте greet() из utils.py и вызовите её.
# Пример вызова в main.py
# from utils import greet
#
# greet("Алексей")  # Привет, Алексей!
# Запустите main.py и убедитесь, что импорт работает!

# моя папка:
# -utils.py
# -main.py

# ===============================================
# 5. Напишите программу, которая измеряет время выполнения кода с помощью time.sleep(2), используя модуль time.
# Ожидаемый вывод:
# Код выполнялся 2.0001 сек

# import time
#
# start = time.time()  # фиксируем время начала выполнения
# time.sleep(2)  # Код, время выполнения которого мы измеряем
# end = time.time()  # фиксируем время окончания выполнения
# t = end - start
# print(f"Код выполнялся {t:.4f} сек")  # (:.4f)-означает 4 знака после запятой

# Ожидаемый вывод:
# Код выполнялся 2.0003 сек

# ===============================================
# 6. Установите библиотеку requests и проверьте, работает ли она.
# Напишите код, который делает HTTP-запрос и получает данные с сайта:
# import requests
#
# response = requests.get("https://api.github.com")
# print(response.status_code)  # Должно вывести 200

# import requests
# response = requests.get("https://api.github.com")
# print(response.status_code)

# requirements.txt

# certifi==2025.8.3
# charset-normalizer==3.4.3
# idna==3.10
# requests==2.32.5
# urllib3==2.5.0

# Ожидаемый вывод:
# 200

# ===============================================
# 7. Установите библиотеку matplotlib и постройте график.
# Напишите код:
# import matplotlib.pyplot as plt
#
# x = [1, 2, 3, 4, 5]
# y = [10, 20, 25, 30, 50]
#
# plt.plot(x, y, marker='o')
# plt.title("Пример графика")
# plt.xlabel("X")
# plt.ylabel("Y")
# plt.show()


import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5]
y = [10, 20, 25, 30, 50]

plt.plot(x, y, marker='o')
plt.title("Пример графика")
plt.xlabel("X")
plt.ylabel("Y")

# Сохраняем график в файл вместо показа
plt.savefig('my_graph.png', dpi=300, bbox_inches='tight')


# Package            Version
# ------------------ -----------
# certifi==2025.8.3
# charset-normalizer==3.4.3
# contourpy==1.3.3
# cycler==0.12.1
# fonttools==4.60.0
# idna==3.10
# kiwisolver==1.4.9
# matplotlib==3.10.6
# numpy==2.3.3
# packaging==25.0
# pillow==11.3.0
# pyparsing==3.2.5
# python-dateutil==2.9.0.post0
# requests==2.32.5
# six==1.17.0
# tk==0.1.0
# urllib3==2.5.0
# ===============================================
# 8. Создайте requirements.txt с зависимостями вашего проекта.
# Удалите один из установленных модулей, например requests
# Восстановите зависимости с помощью установки из requirements.txt

# ===============================================
# 9. Создание простого пакета
# Создайте пакет math_operations с модулями:
# addition.py → Функция add(a, b) складывает 2 числа
# subtraction.py → Функция subtract(a, b) вычитает
# Структура проекта:
#
# math_operations/
# │── __init__.py
# │── addition.py
# │── subtraction.py
# main.py
#
# И запустите обе функции в main.py

# ДЕМОНСТРАЦИЯ ФУНКЦИЙ
# ==============================
#
# ФУНКЦИЯ СЛОЖЕНИЯ:
# add(10, 5) = 15
#
# ФУНКЦИЯ ВЫЧИТАНИЯ:
# subtract(10, 5) = 5