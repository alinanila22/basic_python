# Выражения-генераторы
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ===============================================
# 1. Создайте генератор, который возвращает только строки из списка:
# ["Python", 123, "Java", 456, "C++", 789]
# Выведите все строки в одну строку через пробел.
# Ожидаемый вывод:
# Python Java C++

# date = ["Python", 123, "Java", 456, "C++", 789]
#
# print(" ".join(x for x in date if isinstance(x, str)))

# ===============================================
# 2. Создайте генератор случайных чисел от 1 до 100 (10 чисел),
# используя модуль random (попробуйте сами найти как использовать), и найдите максимальное число.
# Ожидаемый вывод:
# Максимальное число: 98  # (значение может отличаться)

# nums2 = list((random.randint(1, 100) for _ in range(10)))
#
# print("Максимальное число:", max(nums2))

# import random
# def random_gen():
#     for _ in range(10):
#         yield random.randint(1, 100)
# nums = list(random_gen())
# max_num = max(nums)
# print("Максимальное число:", max_num)

# ===============================================
# 3. Создайте генератор, который возвращает слова из файла words.txt,
# но только те, которые длиннее 5 символов.
# Пример содержимого файла (words.txt):
# apple banana cat elephant python
# Ожидаемый вывод:
# banana elephant python

# def long_words_generator(filename):
#     with open(filename, 'r', encoding='utf-8') as f:
#         for word in f.read().split():
#             if len(word) > 5:
#                 yield word
# result = " ".join(long_words_generator("words.txt"))
# print(result)

# ===============================================
# 4. Напишите функцию-генератор, которая перебирает строки файла text.txt,
# возвращая только те, которые содержат слово "Python".
# Пример содержимого text.txt:
# Hello world
# Python is great
# I love coding in Python
# Java is also good
# Ожидаемый вывод:
# Python is great
# I love coding in Python

# def python_lines(filename):
#     with open(filename, 'r', encoding='utf-8') as f:
#         for line in f:
#             if "Python" in line:
#                 yield line.strip()
# for line in python_lines("text.txt"):
#     print(line)

# ===============================================
# 5. Создайте бесконечный генератор, который возвращает случайные числа от 1 до 100.
# Остановите выполнение, как только сгенерируется число 50.
# Ожидаемый вывод (значения могут отличаться):
# 23 89 17 50

# import random
# def nums():
#     while True:
#         yield random.randint(1, 100)
# for num in nums():
#     print(num, end=' ')
#     if num == 50:
#         break

# Ожидаемый вывод:
# 20 69 27 50

# ===============================================
# 6. Создайте функцию-генератор, которая возвращает первые N простых чисел.
# Выведите первые 10 простых чисел.
# Ожидаемый вывод:
# 2 3 5 7 11 13 17 19 23 29

# def prime_generator(N):
#     count = 0
#     num = 2
#     while count < N:
#         for A in range(2, int(num ** 0.5) + 1):
#             if num % A == 0:
#                 break
#         else:
#             yield num
#             count += 1
#         num += 1
# print(" ".join(str(x) for x in prime_generator(10)))

# ===============================================
# 7. Создайте функцию-генератор, которая имитирует загрузку данных из API.
# Генератор должен возвращать строки "Получены данные 1", "Получены данные 2", …
# Остановите генерацию после 5 вызовов next().
# Ожидаемый вывод:
# Получены данные 1
# Получены данные 2
# Получены данные 3
# Получены данные 4
# Получены данные 5

# def API_t():
#     for i in range(1, 6):
#         yield f"Полученные данные {i}"
# gen = API_t()
# for it in gen:
#     print(it)

# ===============================================
# 8. Используйте map() вместе с лямбда-функцией, чтобы для каждого числа из пользовательского ввода
# (числа, разделённые пробелами) вычислить его квадрат.
# Результатом должно быть преобразование входной строки в список квадратов.

# squares = (int(x) for x in "1 2 3 4 5".split())
# print([x**2 for x in squares])

# ===============================================
# 9. Напишите программу, которая с помощью map() и метода строк upper преобразует список названий городов к верхнему регистру.
# Например, преобразуйте список ["Москва", "Санкт-Петербург", "Казань"] в ["МОСКВА", "САНКТ-ПЕТЕРБУРГ", "КАЗАНЬ"].

# cities = ["Москва", "Санкт-Петербург", "Казань"]
# print(list(map(str.upper, cities)))

# ===============================================
# 10. Используя filter(), оставьте в списке только те числа, которые делятся на 3 и на 5 одновременно.
# Дан список: [15, 30, 45, 22, 60, 77, 90, 100].

# numbers = [15, 30, 45, 22, 60, 77, 90, 100]
# print([x for x in numbers if x % 3 == 0 and x % 5 == 0])

# ===============================================
# 11. Используя filter(), получите из списка только строки, содержащие хотя бы одну цифру.
# Дан список: ["hello", "world42", "python3", "abc", "123", "data1science"].

# strings = ["hello", "world42", "python3", "abc", "123", "data1science"]
# result = list(filter(lambda s: any(char.isdigit() for char in s), strings))
# print(result)

# ['world42', 'python3', '123', 'data1science']
# ===============================================
# 12. Используйте zip() и dict(), чтобы создать словарь, в котором:
# Ключи – это названия стран
# Значения – их столицы
# Исходные списки:
# countries = ["Россия", "Франция", "Германия"]
# capitals = ["Москва", "Париж", "Берлин"]
# Результат должен быть таким:
# {"Россия": "Москва", "Франция": "Париж", "Германия": "Берлин"}
# Подсказка: zip объект можно сразу преобразовать в словарь, если в zip преобразовали 2 итерируемых объекта.

# countries = ["Россия", "Франция", "Германия"]
# capitals = ["Москва", "Париж", "Берлин"]
# s = zip(countries, capitals)
# print(dict(s))

# ===============================================
# 13. Используйте zip(*iterable), чтобы выполнить обратное преобразование списка кортежей:
# data = [(1, 'a'), (2, 'b'), (3, 'c')]
# Распакуйте его в два отдельных списка:
# [1, 2, 3]
# ['a', 'b', 'c']

# data = [(1, 'a'), (2, 'b'), (3, 'c')]
# numbers, letters = zip(*data)
# print("Числа:", numbers)
# print("Буквы:", letters)

# 14. Дан список имен names. Отсортируйте его так, чтобы сначала шли имена с заглавной буквы, а затем – с маленькой.
# names = ["петр", "Иван", "мария", "Анна"]
# Ожидаемый результат:
# ["Анна", "Иван", "мария", "петр"]

# Подсказка: вспомните как найти id буквы чтобы понять какая больше заглавная или строчная =)

# names = ["петр", "Иван", "мария", "Анна"]
# names.sort()
# print(names)

# 15. Дан список кортежей products, где первый элемент – название товара, второй – цена.
#  Отсортируйте его по цене (по возрастанию).
#
# products = [("Телефон", 500), ("Ноутбук", 1000), ("Планшет", 700)]
# Ожидаемый результат:
#
# [("Телефон", 500), ("Планшет", 700), ("Ноутбук", 1000)]
# """

products = [("Телефон", 500), ("Ноутбук", 1000), ("Планшет", 700)]
print(sorted(products, key=lambda x: x[1]))