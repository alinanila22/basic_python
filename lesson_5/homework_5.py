# ++++++++++++++++++++++++++++++++++++++++++++++++
# Списки
# ++++++++++++++++++++++++++++++++++++++++++++++++

# ================================================
# 1. Создание списков
# ================================================
# Создай список cities с элементами: "Москва", "Тверь", "Вологда".

cities = ["Москва", "Тверь", "Вологда"]
"""
     0        1         2
["Москва", "Тверь", "Вологда"
    -3       -2        -1
"""
print(cities)
print(cities[-2]) #Тверь
print(cities[2]) #Вологда
print(cities[-1]) #Вологда

# Создай список numbers с целыми числами от 1 до 5.

numbers = [1, 2, 3, 4, 5]
print(numbers)

# Создай список mixed с элементами разных типов: число, строка, булево значение, вещественное число.

mixed = [25, 'строка', True, 5.25]
print(mixed) #тип элементов: [25-class 'int', 'строка'-class 'str', True-class 'bool', 5.25-class 'float']

# ================================================
# 2. Доступ к элементам списка
# ================================================
# Выведи первый элемент списка cities.

# print(cities[0]) #Москва

# Выведи последний элемент списка numbers с помощью отрицательного индекса.

# print(numbers[-1]) #5

# Попробуй получить элемент с индексом 10 из cities. Что произойдет?

# print(cities[10]) #ошибка 'list index out of range', так как нет индекса 10 в cities

# ================================================

# 3. Изменение элементов списка
# ================================================
# Замени второй элемент списка numbers на 10.

numbers[1] = 10
print(numbers) # [1, 10, 3, 4, 5]

# Замени последний элемент списка mixed на "Python".

mixed = [25, 'строка', True, 5.25]
"""
25, 'строка', True, 5.25
-4    -3       -2    -1
"""
mixed[-1] = "Python"
print(mixed) # [25, 'строка', True, 'Python']

# ================================================
# 4. Функции для работы со списками
# ================================================
# Выведи длину списка numbers.
#numbers = [1, 2, 3, 4, 5]

print(len(numbers)) # 5 -len() - возвращает длину списка

# Найди максимальное и минимальное значение в numbers.
print(max(numbers)) # 10 -находит максимальный элемент
print(min(numbers)) # 1 -находит минимальный элемент

# Вычисли сумму всех элементов списка numbers.
print(sum(numbers)) # 23 -вычисляет сумму элементов

# Отсортируй список numbers по возрастанию и убыванию.

print(sorted(numbers)) # [1, 3, 4, 5, 10] -возвращает новый отсортированный список
print(sorted(numbers, reverse=True)) # [10, 5, 4, 3, 1]
# Можно и так:
numbers.sort() #сортирует исходный список (in-place)
print(numbers)

numbers.sort(reverse=True)
print(numbers)

# ================================================
# 5. Операции со списками
# ================================================
# Объедини два списка [1, 2, 3] и [4, 5].

print([1, 2, 3] + [4, 5]) # [1, 2, 3, 4, 5]

# Можно и так:
list1 = [1, 2, 3]
list2 = [4, 5]
print(list1 + list2) # [1, 2, 3, 4, 5]

# Продублируй список ["Python", "is", "awesome"] три раза.

list3 = ["Python", "is", "awesome"]
print(list3 * 3)
# ['Python', 'is', 'awesome', 'Python', 'is', 'awesome', 'Python', 'is', 'awesome']

# Можно и так:
result = list3 * 3
print(result)

# ================================================
# 6. Проверка вхождения
# ================================================
# Проверь, содержится ли число 3 в списке numbers.

print(3 in numbers) # numbers = [1, 2, 3, 4, 5] - True

# Проверь, содержится ли "Москва" в cities.

print("Москва" in cities) # True

# Проверь, содержится ли [1, 2] в mixed.

print([1, 2] in mixed) # mixed = [25, 'строка', True, 5.25] - False

# ================================================
# 7. Удаление элементов
# ================================================
# Удали третий элемент из numbers.

del numbers[-2]
print(numbers [-2]) # 4

# Удали последний элемент из cities с помощью del.

del cities[-1]  # cities = ["Москва", "Тверь", "Вологда"]
print(cities) # ['Москва', 'Тверь']

# ================================================
# 8. Дополнительное задание
# ================================================
# Преобразуй строку "Python" в список символов.

s = "Python"
result = list(s)
print(result) # ['P', 'y', 't', 'h', 'o', 'n']

# Найди максимальный и минимальный символ в этом списке.

print(max(result)) # Максимальный символ: 'y' = 121
print(min(result)) # Минимальный символ: 'P' = 80

# Попробуй сложить все элементы списка. Что произойдет?

# print(sum(result)) #Ошибка(использовать "+" между числом(ште) и строкой (str)-невозможно.TypeError: unsupported operand type(s) for +: 'int' and 'str'

# ++++++++++++++++++++++++++++++++++++++++++++++++
# Срезы списков
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Создание и копирование списков
# ================================================
# Создай список с городами.

cities1 = ["Москва", "Париж", "Мадрид", "Вена", "Амстердам"]
print(cities1)

# Создай копию списка с помощью среза.

cities2 = cities1[:]
print(cities2)

# Проверь, является ли оригинальный список и его копия разными объектами.

print(cities1 is cities2) # False - разные объекты

# Это действительно разные объекты:
print(id(cities1)) # 2563899450240
print(id(cities2)) # 2563899450368

# ================================================
# 2. Извлечение элементов с помощью срезов
# ================================================
# Выведи 2-й и 3-й элементы списка с городами.
"""
    0        1        2        3          4                                    
"Москва", "Париж", "Мадрид", "Вена", "Амстердам"
   -5       -4       -3       -2         -1
"""

print(cities1[1:3]) # ['Париж', 'Мадрид']

# Выведи все элементы, начиная с 3-го.

print(cities1[2:]) # ['Мадрид', 'Вена', 'Амстердам']

# Выведи первые три элемента.

print(cities1[:3]) #['Москва', 'Париж', 'Мадрид']

# Выведи весь список через срез.

print(cities1[:]) # ['Москва', 'Париж', 'Мадрид', 'Вена', 'Амстердам']

# Используй отрицательные индексы для выбора последних двух элементов.

print(cities1[-2:]) # ['Вена', 'Амстердам']

# ================================================
# 3. Использование шагов в срезах
# ================================================
# Выведи каждый второй элемент списка с городам.

print(cities1[1::2]) # ['Париж', 'Вена']

# Выведи список в обратном порядке.

print(cities1[::-1]) # ['Амстердам', 'Вена', 'Мадрид', 'Париж', 'Москва']

# Выведи каждый второй элемент с конца.

print(cities1[-2::-2]) # ['Вена', 'Париж']

# ================================================
# 4. Изменение элементов списка через срезы
# ================================================
# Замени 2-й и 3-й элементы списка с городами на "Сочи" и "Нижний Новгород".

print(cities1)
cities1[1:3] = "Сочи", "Нижний Новгород"
print(cities1) # ['Москва', 'Сочи', 'Нижний Новгород', 'Вена', 'Амстердам']

# Замени каждый второй элемент на "Город".

cities1[1::2] = ["Город"] * len(cities1[1::2])
print(cities1) # ['Москва', 'Город', 'Нижний Новгород', 'Город', 'Амстердам']

# Присвой новые значения кортежем: cities[1:3] = "Волгоград", "Омск".

cities1 = ["Москва", "Париж", "Мадрид", "Вена", "Амстердам"]
print(cities1)
cities1[1:3] = "Волгоград", "Омск"
print(cities1) # ['Москва', 'Волгоград', 'Омск', 'Вена', 'Амстердам']

# ================================================
# 5. Операции с объединением списков
# ================================================
# Объедини два списка [1, 2, 3] и [4, 5, 6].

list1 = [1, 2, 3]
list2 = [4, 5, 6]
print(list1 + list2) # [1, 2, 3, 4, 5, 6]

# Продублируй список ["Python", "rocks"] два раза.

list3 = ["Python", "rocks"]
print(list3 * 2) # ['Python', 'rocks', 'Python', 'rocks']

# ================================================
# 6. Сравнение списков
# ================================================
# Сравни [1, 2, 3] и [1, 2, 3] – равны ли они?

list1 = [1, 2, 3]
list2 = [1, 2, 3]
print(list1 == list2) # True

# Можно и так:
list1 = [1, 2, 3] == [1, 2, 3]
print(list1) # True

# Проверь, что [10, 5, 3] > [5, 10, 3].

list2 = [10, 5, 3] > [5, 10, 3] # True
print(list2)

# Попробуй сравнить [1, 2, 3] и [1, 2, "abc"]. Что произойдет?

list3 = [1, 2, 3] == [1, 2, "abc"]
print(list3) # False, т.к. элементы разные: 3 ≠ "abc"; Типы элементов разные: int ≠ str

# ================================================
# 7. Дополнительное задание
# ================================================
# Создай список chars = list("Python").

chars = list("Python")
print(chars) # ['P', 'y', 't', 'h', 'o', 'n']

# Выведи максимальный и минимальный символ в этом списке.

print(max(chars)) # "y"
print(min(chars)) # "P"

# Попробуй сложить все элементы списка chars. Объясни результат.

# print(sum(chars)) # TypeError: unsupported operand type(s) for +: 'int' and 'str'

# Попробуем так:
chars = ['P', 'y', 't', 'h', 'o', 'n']
result = chars[0] + chars[1] + chars[2] + chars[3] + chars[4] + chars[5]
print(result) #Python

# ++++++++++++++++++++++++++++++++++++++++++++++++
# Методы списков
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Добавление элементов
# ================================================
# Создай список numbers = [5, 10, 15].

numbers = [5, 10, 15]
print(numbers)  #[5, 10, 15]

# Добавь в конец списка число 20 с помощью append().

numbers.append(20)
print(numbers) #[5, 10, 15, 20]

# Вставь число 7 на второе место списка с помощью insert().

numbers.insert(1, 7)
print(numbers) # [5, 7, 10, 15, 20]

# Добавь строку "Python" в список numbers.

numbers.append("Python")
print(numbers) # [5, 7, 10, 15, 20, 'Python']

# ================================================
# 2. Удаление элементов
# ================================================
# Удали число 10 из списка с помощью remove().

numbers.remove(10) # было [5, 7, 10, 15, 20, 'Python']
print(numbers) # стало: [5, 7, 15, 20, 'Python']

# Удали последний элемент списка и выведи его (pop()).

print(numbers.pop(-1)) # Python

# Удали элемент с индексом 1 с помощью pop().

print(numbers.pop(1)) # 7

# Очисти весь список numbers.

numbers.clear()
print(numbers) # []-пусто

# ================================================
# 3. Копирование списков
# ================================================
# Создай список letters = ["a", "b", "c"].

letters = ["a", "b", "c"]
print(letters) # ['a', 'b', 'c']

# Создай копию списка с помощью copy() и list().

# Все три способа создают поверхностные копии (shallow copy)
copy1 = letters[:] # метод списка (классический питоновский способ)
copy2 = list(letters) # функция-конструктор (универсальный способ для любых итерируемых объектов)
copy3 = letters.copy() # срез от начала до конца (явно показывает намерение сделать копию)

# Проверь, являются ли оригинальный список и копия разными объектами.

print(id(copy1)) # 2147744673408
print(id(copy2)) # 2147744673344
print(id(copy3)) # 2147744546368

print(letters is not copy1) # True
print(letters is not copy2) # True
print(letters is not copy3) # True

# ================================================
# 4. Поиск элементов
# ================================================
# Создай список marks = [2, 3, 5, 3, 4, 5, 2, 3].

marks = [2, 3, 5, 3, 4, 5, 2, 3]
print(marks) # [2, 3, 5, 3, 4, 5, 2, 3]

# Определи, сколько раз встречается число 3 в списке (count()).

print(marks.count(3)) # число 3 встречается 3 раза

# Найди индекс первого вхождения числа 5 (index()).

print(marks.index(5)) # 2-Метод index() показывает, что первое вхождение числа 5 находится на индексе 2 (третья позиция в списке, так как индексация начинается с 0)

# Проверь, содержится ли число 6 в списке перед вызовом index().

print(6 in marks) #False

# ================================================
# 5. Изменение порядка элементов
# ================================================
# Создай список nums = [8, 2, 5, 1, 7].

nums = [8, 2, 5, 1, 7]
print(nums)

# Отсортируй его по возрастанию (sort()).

nums.sort()
print(nums) # [1, 2, 5, 7, 8]

# Отсортируй его по убыванию (sort(reverse=True)).

nums.sort(reverse=True)
print(nums) # [8, 7, 5, 2, 1]

# Разверни список (reverse()).

nums.reverse()
print(nums) # [1, 2, 5, 7, 8]

# ================================================
# 6. Сортировка строк
# ================================================
# Создай список cities.

cities = ['Москва', 'Париж', 'Мадрид', 'Вена', 'Амстердам']

# Отсортируй его в алфавитном порядке (sort()).

cities.sort() # сортировка оригинального списка с помощью sort()-изменяет оригинальный список и возвращает None
print(cities) # ['Амстердам', 'Вена', 'Мадрид', 'Москва', 'Париж']

# Можно и так(от большего к меньшему)
cities.sort(reverse=True)
print(cities) # ['Париж', 'Москва', 'Мадрид', 'Вена', 'Амстердам']

# Создай новый отсортированный список с sorted(), не изменяя оригинал.

cities = ['Москва', 'Париж', 'Мадрид', 'Вена', 'Амстердам']
sorted_cities = sorted(cities) #возвращает новый отсортированный список, не изменяя оригинал
print(sorted_cities) # Новый отсортированный список: ['Амстердам', 'Вена', 'Мадрид', 'Москва', 'Париж']
print(cities) # Оригинальный список не изменился: ['Москва', 'Париж', 'Мадрид', 'Вена', 'Амстердам']

# ================================================
# 7. Дополнительное задание
# ================================================
# Создай список символов chars = list("programming").

chars = list("programming")
print(chars) # ['p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']

# Определи количество вхождений буквы "g".

print(chars.count('g')) # 2 (Метод count() возвращает количество раз, когда указанный элемент встречается в списке)

# Разверни список символов (reverse()).

chars.reverse()
print(chars) # ['g', 'n', 'i', 'm', 'm', 'a', 'r', 'g', 'o', 'r', 'p']

# Попробуй отсортировать список chars (sort()). Как изменится порядок букв?

chars.sort()
print(chars) # ['a', 'g', 'g', 'i', 'm', 'm', 'n', 'o', 'p', 'r', 'r']

# ++++++++++++++++++++++++++++++++++++++++++++++++
# Вложенные списки (массивы)
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Создание вложенного списка
# ================================================
# Создай двумерный список matrix, содержащий 3 строки и 4 столбца со значениями от 1 до 12.

a = [
    [1, 2, 3, 4],     #0
    [5, 6, 7, 8],     #1
    [9, 10, 11, 12]   #2
]

print(a) # [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]

# Выведи всю матрицу на экран.

for row in a:        #[1, 2, 3, 4]
    print(row)       #[5, 6, 7, 8]
                     #[9, 10, 11, 12]

# Выведи вторую строку.

print(a[1]) # [5, 6, 7, 8]

# Выведи первый элемент третьей строки.

print(a[2][0]) #9

# ================================================
# 2. Изменение элементов вложенного списка
# ================================================
# Замени все элементы первой строки на 0.

a[0] = [0, 0, 0, 0]
print(a) # [[0, 0, 0, 0], [5, 6, 7, 8], [9, 10, 11, 12]]

# Замени последний элемент второй строки на "Python".

a[1][3] = "Python"
print(a) # [[0, 0, 0, 0], [5, 6, 7, 'Python'], [9, 10, 11, 12]]

# Можно и так:

a[1][-1] = "Python"
print(a) # [[0, 0, 0, 0], [5, 6, 7, 'Python'], [9, 10, 11, 12]]