# ++++++++++++++++++++++++++++++++++++++++++++++++
# Задачи по уроку "Цикл while"
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ===============================================
# 1. Вывод чисел от 1 до N
# Запросите у пользователя число N. Используя цикл while, выведите все числа от 1 до N включительно.

# N = int(input("Введите число N: "))
# i = 1          #инициализируем счетчик, начиная с 1
# while i <= N:  #цикл выполняется, пока счетчик не превысит N
#     print(i)
#     i += 1     #увеличивает счетчик на 1 для перехода к следующему числу

# Пример:

# Введите число N: 5
# 1
# 2
# 3
# 4
# 5

# ===============================================
# 2. Сумма четных чисел до N
# Запросите у пользователя число N. Используя цикл while, вычислите сумму всех четных чисел от 1 до N.

# N = int(input("Введите число N: "))
# i = 2
# sum_even = 0
# while i <= N:
#     sum_even += i
#     i += 2
# print(f"Сумма всех четных чисел от 1 до {N} равна: {sum_even}")

# Пример:
# Введите число N: 6
# Сумма всех четных чисел от 1 до 6 равна: 12  (то есть: 2+4+6=12)
# ===============================================
# 3. Подсчет количества цифр в числе
# Запросите у пользователя натуральное число. Используя цикл while, определите сколько в нем цифр.

# number = int(input("Введите натуральное число: "))
# count = 0  # - инициализируем счетчик цифр
# while number > 0:
#     count += 1     # - увеличиваем счетчик на 1 (нашли еще одну цифру)
#     number //= 10  # - целочисленное деление на 10 (убираем последнюю цифру)
# print("Количество цифр в числе", count)
#
# Пример:
# Введите натуральное число: 10
# Количество цифр 2

# ===============================================
# 4. Определение максимальной цифры в числе
# Запросите у пользователя натуральное число. Используя цикл while, найдите наибольшую цифру в числе.

# num = int(input("Введите натуральное число: "))
# max_num = 0 # инициализируем максимальную цифру; Проверяем особый случай - если число равно 0, то максимальная цифра 0
# while num > 0:  # цикл выполняется, пока число не станет равным 0
#     digit = num % 10  # получаем последнюю цифру числа
#     if digit > max_num:  # если текущая цифра больше максимальной, обновляем максимум
#         max_num = digit
#     num //= 10  # убираем последнюю цифру
# print("Наибольшая цифра в числе: ", max_num)

# Привем:
# Введите натуральное число: 52638
# Наибольшая цифра в числе:  8

# ===============================================
# 5. Запрос пароля
# Программа должна запрашивать у пользователя пароль, пока он не введет правильный ("qwerty123").

# password = ""
# while password != "qwerty123":
#     password = input("Введите пароль: ")
#
# # Как только введен правильный пароль, программа должна вывести "Доступ разрешен".
# print("Доступ разрешен")


# Пример:
# Введите пароль: qwerty123
# Доступ разрешен

# ===============================================
# ++++++++++++++++++++++++++++++++++++++++++++++++
# Задачи по уроку "Операторы break, continue и else в цикле while"
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ===============================================
# 1. Поиск первого четного числа
# Пусть у нас есть список чисел. Используя цикл while, найдите первое четное число и остановите цикл.

# number = [1, 3, 10, 11, 23]
# i = 0
# while i < len(number):
#     if number[i] % 2 == 0:
#         print(number[i])
#         break
#     i += 1

# Если четное число найдено, выведите его, иначе – "Четное число не найдено".

# else:
#     print("Четное число не найдено")

# Пример:
# Для списка [1, 3, 10, 11, 23] программа выведет: 10
# Для списка [1, 3, 11, 23] программа выведет: Четное число не найдено

# ===============================================
# 2. Пропуск отрицательных чисел
# Запрашивайте у пользователя числа, пока он не введет 0. Суммируйте только положительные числа.
# Если число отрицательное, пропускайте его с помощью continue.
#
# total = 0
# while True:
#     number = int(input("Введите число (0 для завершения): "))
#     if number == 0:
#         break
#     if number < 0:
#         continue
#     total += number
# print("Сумма положительных чисел:", total)

# Пример:
# Введите число (0 для завершения): 6
# Введите число (0 для завершения): -4
# Введите число (0 для завершения): -8
# Введите число (0 для завершения): 3
# Введите число (0 для завершения): 0
# Сумма положительных чисел: 9


# ===============================================
# 3. Вывод нечетных чисел из диапазона
# Запросите у пользователя два числа a и b. Используя while, выведите все нечетные числа в диапазоне [a, b].
# Используйте continue, чтобы пропустить четные числа.

# a = int(input("Введите первое число (a): "))
# b = int(input("Введите второе число (b): "))
# start = min(a, b)
# end = max(a, b)
# current = start
# print(f"Нечетные числа в диапазоне [{start}, {end}]:")
# while current <= end:
#     if current % 2 == 0:  # Если число четное
#         current += 1
#         continue
#     print(current)
#     current += 1

# Введите первое число (a): 2
# Введите второе число (b): 3
# Нечетные числа в диапазоне [2, 3]:
# 3
# ===============================================
# 4. Проверка на простое число
# Запросите у пользователя число N. Определите, является ли оно простым (делится только на 1 и само себя).
# Если нашли делитель, остановите цикл (break).
# Если break не сработал, используйте else, чтобы сообщить, что число простое.

# n = int(input("Введите число N: "))
# if n <= 1:
#     print(f"{n} не является простым числом")
# else:
#     i = 2
#     while i < n:
#         if n % i == 0:
#             print(f"{n} не является простым числом (делится на {i})")
#             break
#         i += 1
#     else:
#         print(f"{n} является простым числом")

# ===============================================
# 5. Поиск максимального числа
# Запрашивайте у пользователя числа, пока он не введет 0. Найдите наибольшее введенное число.
# Используйте break, если пользователь откажется вводить данные (введет пустую строку).

# max_num = None
# while True:
#     user_input = input("Введите число: ")
#     if user_input == "":
#         break
#     num = int(user_input)
#     if num == 0:
#         break
#     if max_num is None or num > max_num:
#         max_num = num
# if max_num is not None:
#     print(f"Наибольшее введенное число: {max_num}")
# else:
#     print("Не было введено ни одного числа")

# Пример:
# Введите число : 5
# Введите число : 12
# Введите число : 7
# Введите число : 0
# Наибольшее введенное число: 12


# Введите число : 0
# Не было введено ни одного числа

# ++++++++++++++++++++++++++++++++++++++++++++++++
# Задачи по уроку "Цикл for в Python – основы и применение"
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ===============================================
# 1. Вывести все символы строки в обратном порядке
# Запросите у пользователя строку и с помощью for выведите ее символы в обратном порядке.
# (Вспомните методы списка)

# word = input("Введите строку: ")
# print("Символы в обратном порядке:")
# for char in reversed(word):
#     print(char, end=" ")

# Пример:
#
# Введите строку: привет
# Символы в обратном порядке:
# т е в и р п

# ===============================================
# 2.Замена четных элементов списка на 0
# Дан список чисел. Используя for и range(), замените все четные элементы списка на 0, оставив нечетные без изменений.

# num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print("Исходный список:", num)
# for N in range(len(num)):
#     if num[N] % 2 == 0:
#         num[N] = 0
# print("Измененный список:", num)

# Пример:
# Исходный список: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# Измененный список: [1, 0, 3, 0, 5, 0, 7, 0, 9, 0]

# ===============================================
# 3. Генерация списка степеней двойки
# Запросите у пользователя число N. Сформируйте список степеней двойки от 2^0 до 2^N включительно.

# n = int(input("Введите число N: "))
# powers = []
# for i in range(n + 1):
#     powers.append(2 ** i)
# print(f"Степени двойки от 2^0 до 2^{n}:")
# print(powers)

# Пример:
# Введите число N: 5
# Степени двойки от 2^0 до 2^5:
# [1, 2, 4, 8, 16, 32]

# ===============================================
# 4. Вывод всех чисел от A до B с шагом K
# Запросите у пользователя A, B и K. Используйте for и range() для вывода всех чисел от A до B включительно с шагом K.

# a = int(input("Введите число A: "))
# b = int(input("Введите число B: "))
# k = int(input("Введите шаг K: "))
# print(f"Числа от {a} до {b} с шагом {k}:")
# for number in range(a, b + 1, k):
#     print(number, end=" ")

# Пример:
#
# Введите число A: 1
# Введите число B: 10
# Введите шаг K: 2
# Числа от 1 до 10 с шагом 2:
# 1 3 5 7 9
