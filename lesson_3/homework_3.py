# ++++++++++++++++++++++++++++++++++++++++++++++++
# Задачи на input() и print()
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Простая работа с print()
# ================================================

print("Привет, мир!")
print(5, 10, 15)
print(10 + 25)

# ================================================
# 2. Использование параметров sep и end в print()
# ================================================

a = 1
b = 2
c = 3
print(a, b, c, sep=' & ')

a = "Python"
b = "лучший язык"
print(a, b, end="")

# ================================================
# 3. Форматированный вывод с F-строками
# ================================================

x = 3.14
y = -8
print(f"\nКоординаты точки: x = {x}; y = {y}") #f-string

name = input("Введите свое имя: ") #Введите имя: Иван
age = input("Введите свой возраст: ") #Введите возраст: 25
print(f"Имя: {name}, Возраст: {age}") #Имя: Иван, Возраст: 25

# ================================================
# 4. Работа с input()
# ================================================

name = input('Введите свое имя: ')
print(f"Привет, {name}!")

# ================================================
# 5. Преобразование типов
# ================================================

a = int(input("Введите первое число: "))
b = int(input("Введите второе число: "))
print(f"Результат сложения чисел = {a + b}")

b = int(input("Введите целое число: "))
print(f"Число в квадрате: {b ** 2}")

# ++++++++++++++++++++++++++++++++++++++++++++++++
# Булевые значения
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Основы булевой логики
# ================================================

print(5 > 3) #True
print(10 < 2) #False
print(7 == 7) #True
print(6 != 8) #True
print(4 >= 4) #True
print(9 <= 3) #False

res = 8 > 12
print("Значение res:", res) #False
print(type(res)) # <class 'bool'>

# ================================================
# 2. Проверка четности и кратности числа
# ================================================

x = 15
print(x % 2 == 0) #15 четное число-False
print(x // 5) #15 делится на 5 без остатка-True
print((x % 3 == 0) and (x % 5 == 0)) #15 делится одновременно и на 3 и на 5: True

# ================================================
# 3. Работа с логическими операторами (and, or, not)
# ================================================

y = 4.5
print(y >= 1 and y <= 10) #y = 4.5 попадает в диапазон [1, 10] True
print((y >= 0 and y <= 5) or (y >=10 and y <= 15)) #y = 4.5 входит в  [0, 5] или [10, 15] True

# ================================================
# 4. Приоритет логических операций
# ================================================

print(True or False and False) #and: False and False = False , потом or: True or False = True
print(not False and True) #not: not False = True , потом and: True and True = True (not-учитывается в первую очередь и результат делает обратно)
print(False or not True and True) #not: not True = False , потом and: False and True = False , потом or: False or False = False
print(not (10 > 5 or 3 < 1)) #Скобки: 10 > 5 = True , 3 < 1 = False , потом or: True or False = True , потом not: not True = False

# ================================================
# 5. Приведение типов к bool
# ================================================

a = 200
print(bool(0)) #False
print(bool(-5)) #True
print(bool(3.14)) #True
print(bool("")) #(пустая строка) - False
print(bool("Python")) #True
print(bool(" ")) #(строка с пробелом) - True

# ================================================
# 6. Дополнительное задание
# ================================================

# Присвой переменной n любое число и проверь, является ли оно положительным, четным и делится ли на 3.

n = 10
print(n > 0) #является ли оно положительным - True
print(n % 2 == 0) #является ли оно четным - True
print(n % 3 == 0) #делится ли оно на 3 - False

# ++++++++++++++++++++++++++++++++++++++++++++++++
# Срезы строк
# ++++++++++++++++++++++++++++++++++++++++++++++++

# ================================================
# 1. Доступ к символам по индексу.
#================================================

s = "Программирование"

"""
0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15 
П  р  о  г  р  а  м  м  и  р   о   в   а   н   и   е
                              -6  -5  -4  -3  -2  -1
"""
print(s[0]) #Выведи первый символ строки - П
print(s[- 1]) #Выведи последний символ строки - е
print(s[2],s[-2]) #Выведи третий и предпоследний символ строки

# ================================================
# 2. Обращение к символам с проверкой границ
# ================================================

#print(s[100]) #Ошибка(IndexError: string index out of range)
print(len(s)) #получаем ответ 16-количество букв, но 16 символа нет,так как индексы начинаются с 0
print(len(s)-1) #добавляем -1 и получаем 15-корректно обращаемся к последнему символу
print(s[15])

# ================================================
# 3. Создание срезов
# ================================================

# Индексы: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
# Символы: П р о г р а м м и р  о  в  а  н  и  е
print(s[:6]) #Первые 6 символов - Програ
print(s[-5:]) #Последние 5 символов - вание
print(s[2:7]) #Символы с 3-го по 7-й (индексы 2 до 6) - ограм
print(s[1::2]) #Каждый второй символ строки - ргамрвне
print(s[::-1]) #Развернутая строка - еинавориммаргорП

# ================================================
# 4. Работа с шагом в срезах
# ================================================

print(s[::3]) #Каждый третий символ начиная с первого - Пгмрае
print(s[::-2]) #Строка в обратном порядке через один символ - енврмагр

# ================================================
# 5. Проверка неизменяемости строк
# ================================================

# s[0] = "п" # ошибка-Строка-неизменяемый тип данных-через индекс [0] нельзя менять символ "п"(TypeError: 'str' object does not support item assignment)
s2 = "Дар"
s2 = "П" + s2[1:] # ("П" +) - т.е. дополняем первый символ в начале; s2[1:]-используем все символы начиная со ВТОРОГО(индекса 1) до конца
print(s2) #программирование - создается новая строка, исходная строка s остается неизменной

# ================================================
# 6. Дополнительное задание
# ================================================

word = "abcdefgh"
print(word[2:5]) # подстрока "cde" с помощью среза
print(word[::-1]) # hgfedcba - строка в обратном порядке

#строка без первого и последнего символов-3 варианта
print(word[1:7]) # bcdefg
# print(word[1:-1]) # bcdefg
# print(word[1:-1:]) # bcdefg

